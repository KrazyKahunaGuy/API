"""modified posts table

Revision ID: 5ecc0df40d53
Revises: 353663057282
Create Date: 2022-03-30 20:56:59.171113

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '5ecc0df40d53'
down_revision = '353663057282'
branch_labels = None
depends_on = None


def upgrade():
    op.add_column('posts', sa.Column('title', sa.String))
    op.add_column('posts', sa.Column('body', sa.String))
    op.add_column('posts', sa.Column(
        'tags', postgresql.ARRAY(sa.String, dimensions=1)))
    op.drop_column('posts', 'post')


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
                    sa.Column('id', sa.INTEGER(), server_default=sa.text(
                        "nextval('users_id_seq'::regclass)"), autoincrement=True, nullable=False),
                    sa.Column('username', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.Column('email', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.Column('hashed_password', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.Column('active', sa.BOOLEAN(),
                              autoincrement=False, nullable=True),
                    sa.Column('is_admin', sa.BOOLEAN(),
                              autoincrement=False, nullable=True),
                    sa.Column('created', postgresql.TIMESTAMP(),
                              autoincrement=False, nullable=True),
                    sa.Column('last_modified', postgresql.TIMESTAMP(),
                              autoincrement=False, nullable=True),
                    sa.PrimaryKeyConstraint('id', name='users_pkey'),
                    postgresql_ignore_search_path=False
                    )
    op.create_index('ix_users_username', 'users', ['username'], unique=False)
    op.create_index('ix_users_id', 'users', ['id'], unique=False)
    op.create_index('ix_users_email', 'users', ['email'], unique=False)
    op.create_table('posts',
                    sa.Column('id', sa.INTEGER(), server_default=sa.text(
                        "nextval('posts_id_seq'::regclass)"), autoincrement=True, nullable=False),
                    sa.Column('owner_id', sa.INTEGER(),
                              autoincrement=False, nullable=True),
                    sa.Column('created', postgresql.TIMESTAMP(),
                              autoincrement=False, nullable=True),
                    sa.Column('last_modified', postgresql.TIMESTAMP(),
                              autoincrement=False, nullable=True),
                    sa.Column('post', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.ForeignKeyConstraint(
                        ['owner_id'], ['users.id'], name='posts_owner_id_fkey'),
                    sa.PrimaryKeyConstraint('id', name='posts_pkey'),
                    postgresql_ignore_search_path=False
                    )
    op.create_index('ix_posts_id', 'posts', ['id'], unique=False)
    op.create_table('comments',
                    sa.Column('id', sa.INTEGER(),
                              autoincrement=True, nullable=False),
                    sa.Column('comment', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.Column('owner_id', sa.INTEGER(),
                              autoincrement=False, nullable=True),
                    sa.Column('post_id', sa.INTEGER(),
                              autoincrement=False, nullable=True),
                    sa.Column('parent_id', sa.INTEGER(),
                              autoincrement=False, nullable=True),
                    sa.Column('created', postgresql.TIMESTAMP(),
                              autoincrement=False, nullable=True),
                    sa.Column('last_modified', postgresql.TIMESTAMP(),
                              autoincrement=False, nullable=True),
                    sa.ForeignKeyConstraint(
                        ['owner_id'], ['users.id'], name='comments_owner_id_fkey'),
                    sa.ForeignKeyConstraint(
                        ['parent_id'], ['comments.id'], name='comments_parent_id_fkey'),
                    sa.ForeignKeyConstraint(
                        ['post_id'], ['posts.id'], name='comments_post_id_fkey'),
                    sa.PrimaryKeyConstraint('id', name='comments_pkey')
                    )
    # ### end Alembic commands ###
